{"componentChunkName":"component---src-pages-mdx-parent-file-source-instance-name-mdx-parent-file-name-js","path":"/coding/nlp-information-extraction/","result":{"data":{"mdx":{"id":"0145f9a6-6222-5e5d-8e14-76d423b7cace","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"NLP Information Extraction\",\n  \"date\": \"2021-12-05\",\n  \"category\": \"coding\",\n  \"description\": \"Using Natural Language Processing to extract key information from articles.\",\n  \"languages\": [\"Python\", \"spaCy\", \"Docker\"],\n  \"tags\": [\"software\", \"nlp\"],\n  \"factoids\": [{\n    \"heading\": \"Tools & Languages\",\n    \"body\": \"Python, spaCy, Docker\"\n  }, {\n    \"heading\": \"Project Timeline\",\n    \"body\": \"October 2021 - December 2021\"\n  }, {\n    \"heading\": \"Project Type\",\n    \"body\": \"Group Coursework | Team of 2\"\n  }, {\n    \"heading\": \"My Roles\",\n    \"body\": \"Extraction Rules, Contanerization, Testing\"\n  }]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar ImgCarousel = makeShortcode(\"ImgCarousel\");\nvar ProseWrapper = makeShortcode(\"ProseWrapper\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ImgCarousel, {\n    images: [nlp1, nlp2, nlp3, nlp4, nlp5, nlp6],\n    mdxType: \"ImgCarousel\"\n  }), mdx(ProseWrapper, {\n    mdxType: \"ProseWrapper\"\n  }, mdx(\"h2\", null, \"Details\"), mdx(\"p\", null, \"I completed this project with a friend and fellow CS major, Brandon Walters - this was our final for the class 'Natural Language Processing' at the University of Utah. Our task was extracting key pieces of information from old business acquisition announcements (i.e. What company was purchased? For how much? By whom?).\"), mdx(\"p\", null, \"Grading for this project was somewhat unique: because the entire class was working to maximize accuracy and precision on the same data set, we were ranked against each other as a sort of class competition. In the end, the top 10 teams presented their program architecture and problem solving strategies for everyone to learn from - and Brandon and I ended up getting 6th overall! Some excerpts from our presentation are included in the slideshow above.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"tags":["software","nlp"],"languages":["Python","spaCy","Docker"],"date":"2021-12-05","title":"NLP Information Extraction","description":"Using Natural Language Processing to extract key information from articles.","longDescription":null,"category":"coding","factoids":[{"heading":"Tools & Languages","body":"Python, spaCy, Docker"},{"heading":"Project Timeline","body":"October 2021 - December 2021"},{"heading":"Project Type","body":"Group Coursework | Team of 2"},{"heading":"My Roles","body":"Extraction Rules, Contanerization, Testing"}],"featuredLinks":null,"projectMedia":null,"itchEmbed":null},"parent":{"sourceInstanceName":"coding","name":"nlp-information-extraction"}}},"pageContext":{"id":"0145f9a6-6222-5e5d-8e14-76d423b7cace","parent__sourceInstanceName":"coding","parent__name":"nlp-information-extraction","__params":{"parent__sourceInstanceName":"coding","parent__name":"nlp-information-extraction"}}},"staticQueryHashes":["3159585216"]}